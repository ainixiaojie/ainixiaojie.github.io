[{"title":"Backtracking","url":"/2023/07/28/Backtracking/","content":"\n# 回溯算法（Backtracking algorithm）\n\n通过迭代的方式在解空间中寻找符合条件的解\n寻找符合条件的组合，排列\n\n解空间，要清楚的构造自己的解空间\n树的形状，去搜索解\n\n终止条件与剪枝函数\n剪枝函数：在递归寻找符合条件的解的过程中，遇到中间过程就不符合条件的，就终止当前，不在继续往下寻找，直接返回\n终止条件：寻找的解，形式上符合结果的形式了，是不是最终的解，还需要多加一重判断。终止条件就是解形式符合结果就行。\n\n剪枝函数放置在哪里呢？\n放在for循环里面更好还是在终止条件里面更好？\n\n放在循环里面可以更快的终止不符合条件的解\n但是放在终止条件，有清晰明了的结构\n\n所以自己判断。在处理节点这里处理\n\n```\nvector<vector<int>> res;\nvector<int> tem;\n\nvoid backtracking(参数) {\n    if (终止条件) {\n        存放结果;\n        return;\n    }\n\n    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {\n        处理节点;\n        backtracking(路径，选择列表); // 递归\n        回溯，撤销处理结果\n    }\n}\n```\n\n","tags":["Backtracking algorithm"],"categories":["算法"]},{"title":"hexo blog github","url":"/2023/07/27/1/","content":"# hexo--github\n\n# hexo\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n\n既然是框架，就依照框架的流程去使用它。\nhexo是一个工具应用（Application）\n\n使用流程：\n```\n# 第一步安装这个应用程序，hexo-cli是hexo脚手架，就是一个封装，打包好的，更方便用户使用的应用程序形式\nnpm install hexo-cli -g \n# 开始初始化一个博客。其实这一步，就是使用hexo-cli创建一个容器（blog目录，及其里面相关文件），然后下载一个默认主题的博客，放在容器里面。\nhexo init blog\n# 进入刚才使用初始化命令创建的blog目录\ncd blog\n# 下载相关依赖的库文件，包文件，第三方模块\nnpm install\n# 启动hexo web程序，博客网站可以正常运行起来，此时可以浏览器输入localhost：4000，可以看到默认的hexo博客网站\nhexo server\n```\n\n## 主题设置\n单纯方便，还不够吸引人，吸引人还有其相应的主题\n\n博客不同的样式就是其不同的主题\n\n应用程序生成的blog目录下，有个themes文件夹，可以下载其他的主题放置在这个文件夹里面。\n![](./../img/image.png)\n我这里有三个主题，我所下载的，fuild，resume-docs，Sw-blog这三个。默认主题landscape不在里面。\n![](./../img/image-1.png)\n而每个主题里面的文件目录结构应该一致，大差不差\n![](./../img/image-2.png)\n\n\n其次是配置主题，哪怕是同一个主题，设置不同，也会有不同的差异\n每个主题里面都有一个_config.yml。可以在里面查看可以自己设置的设置\n\nblog目录下，也有一个_config.yml。这个整个本地hexo的设置。两者相互配合。\n若有存在对一个属性不同的设置，主题里面的生效，优先级更高。\n\n# 配置GitHub\n\n## 创建一个仓库repositories\n\n仓库的名字：[GitHub_name].github.io\nAdd a README file这个选项，可选可不选。\n勾上：就是创建readme文件，默认创建仓库main分支了。\n不勾上：就是一个空的仓库，没有分支，里面啥都没有。\n![](./../img/image-3.png)\n在创建的这个仓库里面的settings里面设置\n左侧General设置：Default branch。默认是main，但是我本地使用git上传文件，创建使用的master分支，所以我修改了\n![](./../img/image-4.png)\n左侧Pagers设置：Branch选择blog网站文件那个分支，第二个/root，是要求在该目录下能找到index.html文件。\n这个设置，就是告诉github，在我这个仓库的该分支的该目录下，找到index.html文件，并在人家访问[GitHub_name].github.io网址的时候，响应这个网页。\n![](./../img/image-5.png)\n\n\n## 上传blog网站文件\nblog网站文件怎么获取，使用hexo这个应用程序\n\n```\n# 清楚缓存，清楚之前产生的文件。\nhexo clean\n# 这个命令会产生 .deploy_git文件夹。这个文件和github主仓库的文件一样，这个就是使用hexo，它按照要求（主题，配置文件，自己写的markdown文件），自动生成的blog网站文件\nhexo generate \n# 自动deploy（部署），在_config.yml配置\nhexo deploy\n```\n![](./../img/image.png)\n![](./../img/image-6.png)\n\n\n\n# 提示\n\n配置就这些，对应上了就行\n官方文件要一直看，跟着官方文件走 [hexo官网](https://hexo.io/zh-cn/ \"Title\")","tags":["hexo"],"categories":["hexo"]},{"title":"Hello World","url":"/2023/07/27/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","tags":["Hello World"],"categories":["Hello World"]}]